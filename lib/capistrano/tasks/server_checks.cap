namespace :check do
  desc "Check that we can access everything"
  task :write_permissions do
    on roles(:all) do |host|
      if test("[ -w #{fetch(:deploy_to)} ]")
        info "#{fetch(:deploy_to)} is writable on #{host}"
      else
        error "#{fetch(:deploy_to)} is not writable on #{host}"
        exit 1
      end
    end
  end
  
  desc "Check that we have RVM installed"
  task :rvm do
    require 'capistrano/rvm'
    after "check:rvm", "rvm:check"
  end
  
  namespace :app do
    desc "Check that the app process is running"
    task :running do
      on roles(:all) do |host|
        app_name = "#{fetch :check_app}" + (fetch(:legacy, false) ? "" : "_repos")
        output = capture("ps -U #{fetch(:user)} u | grep #{app_name}")
        if output.split(/\n/).size > 2
          info "Looks like #{fetch :check_app}'s process is running."
        else
          error "Cannot find process like #{fetch :check_app}."
          exit 1
        end
      end
    end
    
    desc "Check that the app is running"
    task :sanity do
      require 'httparty'
      begin
        if HTTParty.get(fetch(:app_url), {:timeout => 10}).code == 200 
          output :info, "#{fetch(:app_url)} is still alive!"
          exit(0)
        else
          output :info, "#{fetch(:app_url)} is experiencing sketchy behavior..."
          exit(1)
        end
      rescue Exception => e
        if !e.to_s.eql? "exit"
          output :error, "#{e} -> #{fetch(:app_url)} is dead..."
          exit(1)
        end
      end
    end
    def output type, msg
      SSHKit::Formatter.const_get(:Pretty).new($stdout) << SSHKit::LogMessage.new(Logger::const_get(Logger::constants.include?(type.upcase.to_sym) ? type.upcase.to_sym : :INFO), msg)
    end
  end
end
